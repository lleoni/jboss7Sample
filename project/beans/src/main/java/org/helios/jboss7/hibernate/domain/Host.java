package org.helios.jboss7.hibernate.domain;

// Generated Oct 27, 2012 1:30:47 PM by Hibernate Tools 3.6.0

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Pattern;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;

/**
 * Host generated by hbm2java
 */
//@Document
public class Host implements java.io.Serializable, DomainObject {
	@SerializedName("hostId")
	//@Indexed(unique=true)
	//@Id	
	private Integer hostId;
	@SerializedName("name")
	private String name;
	@SerializedName("domain")
	private String domain;	
	@SerializedName("ip")
	private String ip;
	@Expose(serialize=false)
	private String fqn;
	@Expose(serialize=false)
	private Date firstConnected;
	@Expose(serialize=false)
	private Date lastConnected;
	@Expose(serialize=false)
	private int agentsConnected;
	@SerializedName("hostAgents")
	private Set<Agent> hostAgents = new HashSet<Agent>();
	
	@SerializedName("conn")
	private Date connected;
	

	public Host() {
	}

	/**
	 * Creates a new Host
	 * @param name
	 * @param domain
	 * @param firstConnected
	 * @param lastConnected
	 * @param agentsConnected
	 */
	public Host(String name, String domain, Date firstConnected, Date lastConnected, int agentsConnected) {
		this.name = name;
		this.domain = domain;
		this.firstConnected = firstConnected;
		this.lastConnected = lastConnected;
		this.agentsConnected = agentsConnected;
	}

	public Host(String name, String domain, String ip, String fqn, Date firstConnected,
			Date lastConnected, int agentsConnected, Date connected, Set<Agent> hostAgents) {
		this.name = name;
		this.domain = domain;
		this.ip = ip;
		this.fqn = fqn;
		this.firstConnected = firstConnected;
		this.lastConnected = lastConnected;
		this.agentsConnected = agentsConnected;
		this.connected = connected;		
		this.hostAgents = hostAgents;
	}
	

	public Integer getHostId() {
		return this.hostId;
	}

	public void setHostId(Integer hostId) {
		this.hostId = hostId;
	}

	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getIp() {
		return this.ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}

	public String getFqn() {
		return this.fqn;
	}

	public void setFqn(String fqn) {
		this.fqn = fqn;
	}

	public Date getFirstConnected() {
		return this.firstConnected;
	}

	public void setFirstConnected(Date firstConnected) {
		this.firstConnected = firstConnected;
	}

	public Date getLastConnected() {
		return this.lastConnected;
	}

	public void setLastConnected(Date lastConnected) {
		this.lastConnected = lastConnected;
	}

	public Date getConnected() {
		return this.connected;
	}

	public void setConnected(Date connected) {
		this.connected = connected;
	}

	/**
	 * {@inheritDoc}
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Host [hostId=");
		builder.append(hostId);
		builder.append(", name=");
		builder.append(name);
		builder.append(", domain=");
		builder.append(domain);		
		builder.append(", ip=");
		builder.append(ip);
		builder.append(", fqn=");
		builder.append(fqn);
		builder.append(", connected=");
		builder.append(connected);
		builder.append("]");
		return builder.toString();
	}

	/**
	 * Returns the domain
	 * @return the domain
	 */
	public String getDomain() {
		return domain;
	}

	/**
	 * Sets the domain
	 * @param domain the domain to set
	 */
	public void setDomain(String domain) {
		this.domain = domain;
	}

	/**
	 * Returns 
	 * @return the agentsConnected
	 */
	public int getAgentsConnected() {
		return agentsConnected;
	}

	/**
	 * Sets 
	 * @param agentsConnected the agentsConnected to set
	 */
	public void setAgentsConnected(int agentsConnected) {
		this.agentsConnected = agentsConnected;
	}
	
	public Set<Agent> getHostAgents() {
		return this.hostAgents;
	}

	public void setHostAgents(Set<Agent> hostAgents) {
		this.hostAgents = hostAgents;
	}
	

	/** The default domain name */
	static final String DEFAULT_DOMAIN = "DefaultDomain";
	/** The host name used when the name is unknown */
	static final String UNKNOWN = "Unknown";
	/** The default host/domain pair */
	static final String[] DEFAULT_PAIR = {UNKNOWN, DEFAULT_DOMAIN};
	/** The domain splitter */
	static final Pattern DOMAIN_SPLITTER = Pattern.compile("\\.");
	/** White space cleaner */
	static final Pattern WHITE_SPACE = Pattern.compile("\\s+");

	/**
	 * Accepts an optionally fully qualified host name, and returns an array with the simple host name
	 * and the domain name. If the passed name has no domain, the default domain "Default" will be used.
	 * @param name The name to parse
	 * @return A string array with the simple host name and the domain
	 */
	public static String[] splitHostName(String name) {
		if(name==null || name.trim().isEmpty()) return DEFAULT_PAIR;
		String[] frags = DOMAIN_SPLITTER.split(WHITE_SPACE.matcher(name.trim()).replaceAll(""));
		String[] pair = new String[2];
		pair[0] = frags[0];
		if(frags.length==1) {
			pair[1] = DEFAULT_DOMAIN;
		} else {
			StringBuilder b = new StringBuilder();
			for(int i = 1; i < frags.length; i++) {
				b.append(frags[i]).append(".");
			}
			b.deleteCharAt(b.length()-1);
			pair[1] = b.toString();
		}
		return pair;
	}

}
